<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <!-- /* clmtrackr libraries */ -->
    <script src="/javascripts/clmtrackr.js"></script>
    <script src="/javascripts/input.js"></script>

  </head>
  <body>

    <!-- video の上に canvas をオーバーレイするための div 要素 -->
    <div id="container">
      <video id="inputVideo" width="400" height="300" autoplay>  <!-- カメラ映像を流す video -->
        <source src="./media/tikeda2.mp4" />
      </video>

      <canvas id="canvas" width="400" height="300"></canvas>        <!-- 重ねて描画する canvas -->
    </div>

  <div id="dat"></div>  <!-- データ表示用 div 要素 -->

    <!-- javascript実行 -->
  <script type="text/javascript">

    // もろもろの準備
    var videoInput = document.getElementById('inputVideo'); // 変数として格納
    var canvas = document.getElementById("canvas");         // canvas 要素の取得
    var context = canvas.getContext("2d");                  // canvas の context の取得
    var counter = 0;//まとめるときのカウンタ
    var fileSum = 20;//まとめて送るデータ数
    var collections = {};//まとめる用の配列

    // clmtrackr の開始
    var ctracker = new clm.tracker();// インスタンスを取得
    ctracker.init();                 // 初期化
    ctracker.start(videoInput);      // スタート

    function positionLoop() {
      requestAnimationFrame(positionLoop);
      var positions = ctracker.getCurrentPosition();        // 顔部品の現在位置の取得
      // positions = [[x_0, y_0], [x_1,y_1], ... ]
      showData(positions);                                  // データの表示
      context.clearRect(0, 0, canvas.width, canvas.height); // canvas をクリア
      // tracker.draw(canvas);                                 // canvas にトラッキング結果を描画
    }
    positionLoop();

    // 顔部品（特徴点）の位置データを表示する showData 関数
    function showData(pos) {
      var str = "";                                         // データの文字列を入れる変数
      for(var i = 0; i < pos.length; i++) {                 // 全ての特徴点（71個）について
        str += "特徴点" + i + ": ("
             + Math.round(pos[i][0]) + ", "                 // X座標（四捨五入して整数に）
             + Math.round(pos[i][1]) + ")<br>";             // Y座標（四捨五入して整数に）
        
      }
      var dat = document.getElementById("dat");             // データ表示用div要素の取得
      dat.innerHTML = str;                                  // データ文字列の表示
      
      // データまとめる
      // 座標だけ送ってるから，タイムスタンプもいるかな
      if(pos!=false){
        var obj = {data:pos};
        addData(obj);
      }
    }
  // データをまとめる
  // 一回に送るデータ数はfileSumを変えて
    function addData(data){
      var key = String(counter);
      collections[key] = data;
      counter++;
      if(counter==fileSum){
        console.log(collections);
        console.log(JSON.stringify(collections));
        doPost('http://localhost:3000',JSON.stringify(collections));
        counter=0;
        collections = {};
      }
    }
  // POS投げる部分
    function doPost(url, data) {
      console.log(url);
      var xhr = new XMLHttpRequest();
      xhr.open("POST", url);
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.onload = () => {
        console.log(xhr.status);
        console.log("success!");
      };
      xhr.onerror = () => {
        console.log(xhr.status);
        console.log("error!");
      };
      xhr.send(data);
    }

  </script>


  </body>
</html>
